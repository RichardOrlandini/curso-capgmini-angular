configs: 

ng build --configuration production

------------------------
# Gerar um componente: 
    ng generate component nome;
-----------------------------------
#interpolação de texto: 
<p> {{ nome }} </p> 
- no arquivo html do componente.

export class SegundoComponenteComponent {
  nome = "João"
}

- no arquivo .ts do componente.
-----------------------------------

# paipe: Servem para formatar o texto da forma como queremos, temos varios prontos do angular
https://angular.io/guide/pipes.

exemplo:
<p>Data de nascimento: {{dataNascimento | date:"dd/MM/yyyy"}} </p> - html

export class SegundoComponenteComponent { - arquivo ts.
  nome = "João";
  dataNascimento = "1995-01-01";

}

- comando para gerar um pipe : ng generate pipe <nome>
 vamos editar agora o nosso pipe:

 arquivo pipe: 

 import { Pipe, PipeTransform } from '@angular/core';

@Pipe({
  name: 'multiplicaPor'
})
export class MultiplicaPorPipe implements PipeTransform {

  transform(value: number, multiplicador : number): unknown {
    return value * multiplicador;
  }
}

- utilização em um arquivo html:
<p>{{7 | multiplicaPor: 8}}</p>

-----------------------------------

# Adicionar imagem no template: 
arquivo html: 
<img [src]="urlImagem" width="300"> 

arquivo .ts: 
export class SegundoComponenteComponent {
  urlImagem = "./assets/foto-perfil-3.PNG";
}

-----------------------------------

# disparar métodos a partir de eventos: 

- arquivo html: 

<button (click)="mostrarDataNascimento()" type="button" > Mostrar data de nascimento</button>

- arquivo .ts:

export class SegundoComponenteComponent {
  dataNascimento = "1995-01-01";

  mostrarDataNascimento(){
    alert(`A data de nascimento é ${this.dataNascimento} `)
  }
}
-----------------------------------

#Data Binding: 
- arquivo html: 
<h2>Two-way Data Binding</h2>
<label for="nome">Digite o nome: </label>
<input type="text" [(ngModel)]="nome"> // ngModel vai precisar do import de  FormsModule
<p> Nome digitado:  {{nome}} </p>

-arquivo .ts:
export class TwoWayDataBindingComponent {
  nome = "";
}

- arquivo app.module: 
 imports: [
    BrowserModule,
    AppRoutingModule,
    FormsModule // devemos import essa propriedade para funcionar
  ],

resumo: o que for digitado no input vai ser visivel em tempo real no <p> da pagina.
-----------------------------------

# Renderização de listas: 

- arquivo html: 
<h2>Renderizando uma lista de dados:</h2>
<ul class="lista-produtos" >
    <li *ngFor="let celular of celulares" >
        <strong> {{celular.nome}} </strong>
        <p> {{celular.descricao}} </p>
        <span  [ngClass]="celular.esgotado ? 'esgotado' : '' "  >{{celular.esgotado ? "esgotado" : "disponivel"}} </span>
    </li>
</ul>

- arquivo .ts: 
export class RenderizandoListasComponent {
  celulares: Celular[] = [
    {id: 1, nome: "Celular XL", descricao: "Um celular grande", esgotado: false},
    {id: 2, nome: "Celular Normal", esgotado: false},
    {id: 3, nome: "Celular Mini", descricao: "Um celular pequeno", esgotado: true}
  ]
}

- arquivo types na raiz da pasta app:

 export interface Celular {
    id: number;
    nome: string;
    descricao?: string;
    esgotado: boolean;
}
-----------------------------------

#Componente generalizado:
- passando dados para um componente: 

- arquivo .html: 
<p> {{nome}} {{sobrenome}} </p>

- arquivo .ts: 
import { Component , Input} from '@angular/core';

export class ComponenteGeneralizadoComponent {
  @Input() nome = "";
  @Input() sobrenome = "";
}
-----------------------------------

# Interação entre componentes: 

comunicação entre os elementos:

arquivo html elemento pai: 
<h2>Interação entre componentes</h2>
<h3>O sobrenome está definido no elemento pai: {{sobrenome}}  </h3>
<h3>o nome completo é: {{filho.nome}} {{filho.sobrenome}} </h3>
<app-componente-filho 
    [sobrenome]="sobrenome"  
    (mostraNome)="mostrarNomeCompleto($event)" 
    #filho>
</app-componente-filho>

arquivo .ts elemento pai: 
export class ComponentePaiComponent {
  sobrenome = "da Silva";

  mostrarNomeCompleto(nomeCompleto: any){
    alert(`O nome completo é ${nomeCompleto}`);
  };
}

arquivo html elemento filho: 
<h3>O sobrenome veio do elemnto pai: {{sobrenome}} </h3>
<label for="nome">Digite o nome: </label>
<input type="text" id="nome" [(ngModel)]="nome" >
<button type="butto" (click)="mostraNome.emit(nome + '' + sobrenome)">Mostrar nome completo</button>

arquivo .ts elemento filho: 
export class ComponenteFilhoComponent {
  @Input() sobrenome = "";
  @Output() mostraNome = new EventEmitter();
  nome = "";
}
-----------------------------------

# Serviços: 



-----------------------------------

#


-----------------------------------

#



obs: rever aula sem fazer o codigo:
4.h